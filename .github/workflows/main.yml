name: Build, push docker image and deploy SMART misinformation service to DISC's Kubernetes cluster

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    build:
        runs-on: ubuntu-latest
        
        steps:
            - uses: actions/checkout@v3

            - uses: benjlevesque/short-sha@v2.2
              id: short-sha
              with: 
                length: 6
            
            - name: Builder docker image
              run: docker build . --tag ghcr.io/ou-disc/smart-misinformation:$SHA
              env:
                SHA: ${{ steps.short-sha.outputs.sha }}
            
            - name: Login to GitHub Container Registery
              uses: docker/login-action@v1
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Push image
              run: docker push ghcr.io/ou-disc/smart-misinformation:$SHA
              env:
                SHA: ${{ steps.short-sha.outputs.sha }}
            
    deployment:
        needs: build

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
            
            - uses: benjlevesque/short-sha@v2.2
              id: short-sha
              with:
                length: 6
            
            - name: Deploy to Kubernetes
              uses: deler-aziz/helm-deploy-action@v1.0.0
              with:
                helm: helm3
                release: 'smart-misinformation'
                namespace: 'nato-react'
                repo: https://ou-disc.github.io/helmcharts
                repo-alias: ou-disc-charts
                chart: 'ou-disc-charts/disc-generic'
                chart-version: '3.9.0'
                token: '${{ github.token }}'
                timeout: 5m0s
                atomic: true
                value-files: >-
                    [
                        "values.yaml"
                    ]
                values: |
                    app:
                        image:
                            tag: ${{ steps.short-sha.outputs.sha }}
              env:
                KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
                SHA: ${{ steps.short-sha.outputs.sha }}
            